{"version":3,"sources":["logo.svg","components/navBar/navBar.jsx","components/List/list-item/list-item.jsx","components/List/list-item/favorite-list-item.jsx","components/List/list.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","tabCallback","className","onClick","src","logo","alt","ListItem","data","dataPlanets","addFav","useState","input","setInput","elements","filter","el","name","toLowerCase","match","eye_color","birth_year","map","e","key","elementsPlanet","climate","terrain","value","onChange","target","FavItems","favData","favDataPlanets","remFav","cat","setCat","elementsPlanets","showAll","tabSelected","binForPeople","binForPlanets","temp2","temp2Plantes","List","people","setPeople","planets","setPlanets","favoritePeople","setFavoritePeople","favoritePlanets","setFavoritePlanets","useEffect","callApi","baseUrl","axios","get","then","res","push","results","next","catch","err","console","log","callApiPlanets","baseUrlPlanets","element","from","some","window","alert","bin","setToFavoriteList","elem","indexPeople","indexOf","splice","indexPlanets","removeFromFavorite","App","currentTab","setCurrentTab","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fe080a8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport logo from '../../logo.svg'\r\n\r\nconst Navbar = ({ tabCallback }) => {\r\n  return (\r\n    <nav className='nav-bar-style'>\r\n      <img onClick={() => tabCallback('Search')} src={logo} alt='logo' />\r\n      <ul>\r\n        <li>\r\n          \r\n          <button onClick={() => tabCallback('Search')}> Search</button>\r\n        </li>\r\n        <li>\r\n          \r\n          <button onClick={() => tabCallback('Favorite')}>\r\n            \r\n            Favorites\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from 'react'\r\n\r\nconst ListItem = ({ data, dataPlanets, addFav }) => {\r\n  const [input, setInput] = useState('')\r\n  const elements = data\r\n    .filter(\r\n      (el) =>\r\n        el.name.toLowerCase().match(input.toLowerCase()) || \r\n        el.eye_color.toLowerCase().match(input.toLowerCase()) ||\r\n        el.birth_year.toLowerCase().match(input.toLowerCase())\r\n    )\r\n    .map((e) => ( \r\n      <div className='card' key={e.name}>\r\n        <div className='container'>\r\n          <p>CHARACTER</p>\r\n          <div>Name:{e.name}</div>\r\n          <div>Eye Color: {e.eye_color}</div>\r\n          <div>Age:{e.birth_year}</div>\r\n          <button\r\n            className='favBtn'\r\n            onClick={() => addFav(e, 'people')} \r\n          >\r\n            Add To Favorites\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ))\r\n  \r\n  const elementsPlanet = dataPlanets\r\n    .filter(\r\n      (el) =>\r\n        el.name.toLowerCase().match(input.toLowerCase()) || \r\n        el.climate.toLowerCase().match(input.toLowerCase()) ||\r\n        el.terrain.toLowerCase().match(input.toLowerCase())\r\n    )\r\n    .map((e) => ( \r\n      <div className='card' key={e.name}>\r\n        <div className='container'>\r\n          <p>PLANET</p>\r\n          <div>Name: {e.name}</div>\r\n          <div>Climate: {e.climate}</div>\r\n          <div>Terrain: {e.terrain}</div>\r\n          <button className='favBtn' onClick={() => addFav(e, 'planets')}>\r\n            Add To Favorites\r\n          </button>\r\n        </div>\r\n      </div>\r\n    ))\r\n  return (\r\n    <div className='listContainer'>\r\n      <div className='searchBar'>\r\n        <input value={input} onChange={(e) => setInput(e.target.value)} />\r\n      </div>\r\n\r\n      <div className='listItem'>\r\n        <div className='Item'>{elements}</div>\r\n        <div className='Item'>{elementsPlanet}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ListItem\r\n","import React, { useState } from 'react'\r\n\r\nconst FavItems = ({ favData, favDataPlanets, remFav }) => {\r\n  const [cat, setCat] = useState('all')\r\n  const elements = favData.map((e) => (\r\n    <div className='Item' key={e.name}>\r\n      <div className='card'>\r\n        <div className='container'>\r\n          <p>CHARACTER</p>\r\n          <div>Name: {e.name}</div>\r\n          <div>Eye Color: {e.eye_color}</div>\r\n          <div>Age: {e.birth_year}</div>\r\n          <button className='favBtn' onClick={() => remFav(e, 'people')}>\r\n            Remove from Favorites\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ))\r\n  const elementsPlanets = favDataPlanets.map((e) => (\r\n    <div className='Item' key={e.name}>\r\n      <div className='card'>\r\n        <div className='container'>\r\n          <p>PLANET</p>\r\n          <div>Name: {e.name}</div>\r\n          <div>Climate: {e.climate}</div>\r\n          <div>Terrain: {e.terrain}</div>\r\n          <button className='favBtn' onClick={() => remFav(e, 'planets')}>\r\n            Remove from Favorites\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ))\r\n  const showAll = [...elementsPlanets, ...elements]\r\n\r\n  function tabSelected (cat) {\r\n    switch (cat) {\r\n      case 'all':\r\n        return showAll\r\n      case 'people':\r\n        return elements\r\n      case 'planets':\r\n        return elementsPlanets\r\n      default:\r\n        return showAll\r\n    }\r\n  }\r\n  return (\r\n    <div className='listContainer'>\r\n      <ul className='category'>\r\n        <li>\r\n          <button onClick={() => setCat('all')}>All</button>\r\n        </li>\r\n        |\r\n        <li>\r\n          <button onClick={() => setCat('people')}>People</button>\r\n        </li>\r\n        |\r\n        <li>\r\n          <button onClick={() => setCat('planets')}>Planets</button>\r\n        </li>\r\n      </ul>\r\n      <div className='listItem'>{tabSelected(cat)}</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FavItems\r\n","import React, { useEffect, useState } from 'react'\r\nimport ListItem from './list-item/list-item'\r\nimport FavItems from './list-item/favorite-list-item'\r\nimport axios from 'axios'\r\n\r\nconst binForPeople = []\r\nconst binForPlanets = []\r\nconst List = ({ tabSelected }) => {\r\n  const [people, setPeople] = useState([])\r\n  const [planets, setPlanets] = useState([])\r\n  const [favoritePeople, setFavoritePeople] = useState([])\r\n  const [favoritePlanets, setFavoritePlanets] = useState([])\r\n  const baseUrl = 'https://swapi.dev/api/people/'\r\n  const baseUrlPlanets = 'https://swapi.dev/api/planets/'\r\n\r\n  useEffect(() => {\r\n    callApi(setPeople, baseUrl)\r\n    callApiPlanets(setPlanets, baseUrlPlanets)\r\n\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  function setToFavoriteList (element, from) {\r\n    // add element to fav\r\n    if (from === 'people') {\r\n      console.log('setToFavorite fired')\r\n      if (binForPeople.some((el) => el.name === element.name)) {\r\n        // check if element already exist in the list\r\n        window.alert('already exists')\r\n      } else {\r\n        let bin = []\r\n        bin = [...bin, element] // set new element in bin\r\n        binForPeople.push(...bin) // save it in global binForPeople to keep data\r\n        setFavoritePeople([...binForPeople]) // save it to state\r\n      }\r\n    } else {\r\n      console.log('setToFavorite fired')\r\n      if (binForPlanets.some((el) => el.name === element.name)) {\r\n        // check if element already exist in the list\r\n        window.alert('already exists')\r\n      } else {\r\n        let bin = []\r\n        bin = [...bin, element] // set new element in bin\r\n        binForPlanets.push(...bin) // save it in global binForPlanets to keep data\r\n        setFavoritePlanets([...binForPlanets]) // save it to state\r\n      }\r\n    }\r\n  }\r\n\r\n  function removeFromFavorite (element, from) {\r\n    // remove element\r\n    if (from === 'people') {\r\n      const indexPeople = binForPeople.indexOf(element) // find index of specific element\r\n      if (indexPeople > -1) {\r\n        binForPeople.splice(indexPeople, 1) // remove if correct index found\r\n      }\r\n      setFavoritePeople([...binForPeople]) // add the new list to state (with element removed)\r\n    } else {\r\n      const indexPlanets = binForPlanets.indexOf(element) // find index of specific element\r\n      if (indexPlanets > -1) {\r\n        binForPlanets.splice(indexPlanets, 1) // remove if correct index found\r\n      }\r\n      setFavoritePlanets([...binForPlanets]) // add the new list to state (with element removed)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className='listComponent'>\r\n      <div className='listItemContainer'>\r\n        {tabSelected === 'Search' ? (\r\n          <ListItem\r\n            data={people}\r\n            dataPlanets={planets}\r\n            addFav={(element, from) => setToFavoriteList(element, from)}\r\n          />\r\n        ) : (\r\n          <FavItems\r\n            favData={favoritePeople}\r\n            favDataPlanets={favoritePlanets}\r\n            remFav={(elem, from) => removeFromFavorite(elem, from)}\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst temp2 = []\r\nfunction callApi (setPeople, baseUrl) {\r\n  axios\r\n    .get(`${baseUrl}`)\r\n    .then((res) => {\r\n      temp2.push(...res.data.results)\r\n      setPeople([...temp2])\r\n      if (res.data.next !== null) {\r\n        callApi(setPeople, res.data.next)\r\n      }\r\n    })\r\n    .catch((err) => console.log('ERROR ---> ' + err))\r\n}\r\n\r\nconst temp2Plantes = []\r\nfunction callApiPlanets (setPlanets, baseUrlPlanets) {\r\n  \r\n\r\n  axios\r\n    .get(`${baseUrlPlanets}`)\r\n    .then((res) => {\r\n      temp2Plantes.push(...res.data.results)\r\n      setPlanets([...temp2Plantes])\r\n      if (res.data.next !== null) {\r\n        callApiPlanets(setPlanets, res.data.next)\r\n      }\r\n    })\r\n    .catch((err) => console.log('ERROR ---> ' + err))\r\n}\r\n\r\nexport default List\r\n","import React, { useState } from 'react'\r\n\r\nimport './App.scss'\r\nimport Navbar from './components/navBar/navBar'\r\nimport List from './components/List/list'\r\n\r\nfunction App () {\r\n  // state of cuttent tab selected by user to chose which list\r\n  const [currentTab, setCurrentTab] = useState('Search')\r\n\r\n  function tab (category) {\r\n    setCurrentTab(category)\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <header className='App-header'>\r\n        <Navbar tabCallback={(cat) => tab(cat)} />\r\n        <h1 className='titleTab'>{currentTab}</h1>\r\n      </header>\r\n      <main>\r\n        <div className='content'>\r\n          <List tabSelected={currentTab} />\r\n        </div>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}